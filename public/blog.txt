WIP - mostly notes, might make a blog post.

Wanted to create a loaded dice simulation for a lucky website.
Here's what we'll create in this post/tutorial:

LIVE_DEMO_OF_END_RESULT
Click to rerun?

## Setup

Tech used:
- Typescript (a typed superset of javascript)
- THREE.js
- CANNON.js (physics) 
To do this we used THREE.js to manage the 3d rendering of the dice.
For the physics engine we used CANNON.js

First step is rendering something, a former colleague of mine (Lucas) would always say
"Let's get some pixels on the screen". 
Let's render a basic cube as a first step, we're using THREE.js, a power javascript 3d library, .

CODE_FOR_BASIC_CUBE_3D

Before we add gravity we'll want something for this dice to fall onto.
We need a ground. We use a THREE.js Plane to do this.

SHOW_PLANE_CODE

Now let's apply gravity to the die and watch it fall to the ground.
To manage the physics, so we can skip some math degrees, we'll be using the
CANNON.js library.

SHOW_ADD_CANNON

SHOW_DICE_FALLING_WITH_CANNON

Nice, so far we've got a basic physics simulation with something similar to a dice.

## Physics

To cast the die we add some random forces on initialization.

Now we need to know what number is facing up on the dice once it has stabilized.

To do this we need to compute the orientation of the die.
We can compute the orientation of the die by attaching points to each side of the die
and then performing all of the physics on the entire group, die and points.
After the dice is rotated we apply the rotation to these points and calculate
the point with the highest y position. That point indicates the top facing side.

## Model & Material

To make it look as a proper dice should we'll import a dice model and material into our scene.
We used a creative commons model from  . 
There are many sites out there to find existing models.
Alternatively we could have modelled it ourselves as it is a simple shape and material.

We now have a running dice simulation with a nice model where we can see
the ending number of the dice.

## Lucky 7

We want the dice to always land on 3 and 4 for a total of 7 for this website.
One way of doing this is applying a pushing force on the stabilized die to
make it rotate to the intended orientation.

This approach worked most of the time, and had an interesting look.
The dice would occasionally run into each other and be unable to rotate to their intended side.
Ultimately we decided this method seemed a little too 'loaded' and cartoonish.

We want to have the dice always land on their intended sides without the extra push force at the end.
We had two options of how to do this:
1. Math it up and create an equation that would always land the dice with their intended side up, this could hard to do with the possible collisions involved.
2. Run the random simulation a lot of times and save the initial parameters of the tosses which achieve the intended lucky 7.

Approach #1 was tempting, but I thought it could potentially take a long time and would be harder to tweak, so I went with the less elegant and complete solution, #2.
We'll gather a set of initial dice states, involving position, rotation, velocity, and angular velocity. Then we'll use those values to run the simulation users see on the page.
With enough data entries this method will effectively give the same impression as the first method.

So we ran the simulation on an accelerated time scale about X times to gain X entries in our `LuckyNumbers` array.

The ending result is a lucky dice tossing simulation:

Thanks, the code is on github: 

Feel free to make suggestions or fix typos on this blog post on github: 



// TODO?
Next blog post we'll investigate how we pulled off the 3d rendering of an image
on a mug for Artsable.com - there's a catch - these images are generated on our end using (untrustable) user submitted code.




I would like a social media website that focuses on improving people's relationships and happiness. I do not value a social media site that aims to maximize my time spent on it and how it can use me as a product to sell.